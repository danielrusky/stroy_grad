version: '3'

services:

  redis:
    image: redis
    ports:
      - '6379:6379'

  db:
    image: postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    tty: true
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - '8000:8000'
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  celery:
    build: .
    tty: true
    command: celery -A config worker -l INFO
    env_file:
      - .env
    depends_on:
      - redis
      - app

  celery_beat:
    build: .
    tty: true
    command: celery -A config beat -l INFO
    env_file:
      - .env
    depends_on:
      - redis
      - app



volumes:
  pg_data:




#version: '3'

#services:
#  db:
#    image: postgres
#    environment:
#      POSTGRES_PASSWORD: 1234
#      PGDATA: /var/lib/postgresql/data/pgdata

#  app:
#    build: .
#    command: python manage.py runserver 0.0.0:8000
#    ports:
#      - '8000:8000'
#    depends_on:
#      - db

#docker-compose build
#docker-compose up
#docker-compose exec app python manage.py migrate